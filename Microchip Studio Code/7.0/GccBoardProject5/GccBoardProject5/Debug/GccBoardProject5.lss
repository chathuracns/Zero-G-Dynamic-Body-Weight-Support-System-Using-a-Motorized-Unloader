
GccBoardProject5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013a  0080013a  00000a46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddd  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cb  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000029cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007aa4  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fa  00000000  00000000  0000a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000abea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000058f  00000000  00000000  0000ac72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	e1 d0       	rcall	.+450    	; 0x25e <main>
  9c:	6b c4       	rjmp	.+2262   	; 0x974 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <uart_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b4:	08 95       	ret

000000b6 <uart_transmit>:
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	95 ff       	sbrs	r25, 5
  be:	fd cf       	rjmp	.-6      	; 0xba <uart_transmit+0x4>
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c4:	08 95       	ret

000000c6 <uart_transmit_string>:
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	ec 01       	movw	r28, r24
  cc:	88 81       	ld	r24, Y
  ce:	88 23       	and	r24, r24
  d0:	29 f0       	breq	.+10     	; 0xdc <uart_transmit_string+0x16>
  d2:	21 96       	adiw	r28, 0x01	; 1
  d4:	f0 df       	rcall	.-32     	; 0xb6 <uart_transmit>
  d6:	89 91       	ld	r24, Y+
  d8:	81 11       	cpse	r24, r1
  da:	fc cf       	rjmp	.-8      	; 0xd4 <uart_transmit_string+0xe>
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <uart_putchar>:
  e2:	e0 ec       	ldi	r30, 0xC0	; 192
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	95 ff       	sbrs	r25, 5
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <uart_putchar+0x4>
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <uart_putchar_printf>:
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	11 f4       	brne	.+4      	; 0xfe <uart_putchar_printf+0xc>
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	f2 df       	rcall	.-28     	; 0xe2 <uart_putchar>
  fe:	8c 2f       	mov	r24, r28
 100:	f0 df       	rcall	.-32     	; 0xe2 <uart_putchar>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <push_buttons>:


// Initialize push buttons
void push_buttons() {
	// Set safety_btn and start_btn as input pins
	DDRB &= ~((1 << safety_btn) | (1 << start_btn));
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	8c 7f       	andi	r24, 0xFC	; 252
 10e:	84 b9       	out	0x04, r24	; 4
	
	// Set GND_btn as an output pin
	DDRB |= (1 << GND_btn);
 110:	22 9a       	sbi	0x04, 2	; 4
	
	// Set GND_btn to LOW (0V)
	PORTB &= ~(1 << GND_btn);
 112:	2a 98       	cbi	0x05, 2	; 5

	// Enable pull-up resistors for the buttons (optional)
	PORTB |= (1 << safety_btn) | (1 << start_btn);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	83 60       	ori	r24, 0x03	; 3
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret

0000011c <stepper_init>:


//Initialize the stepper motor
void stepper_init() {
	// Set pins as output
	DDRD |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	88 63       	ori	r24, 0x38	; 56
 120:	8a b9       	out	0x0a, r24	; 10

	// Enable the stepper driver
	PORTD &= ~(1 << EN_PIN); // Active low enable
 122:	5d 98       	cbi	0x0b, 5	; 11
 124:	08 95       	ret

00000126 <stepper_set_direction>:
}

//Set the Direction of the stepper motor
void stepper_set_direction(uint8_t direction) {
	if (direction == 0) {
 126:	81 11       	cpse	r24, r1
 128:	02 c0       	rjmp	.+4      	; 0x12e <stepper_set_direction+0x8>
		PORTD &= ~(1 << DIR_PIN); // Set direction to one way
 12a:	5c 98       	cbi	0x0b, 4	; 11
 12c:	08 95       	ret
		} else {
		PORTD |= (1 << DIR_PIN);  // Set direction to the opposite way
 12e:	5c 9a       	sbi	0x0b, 4	; 11
 130:	08 95       	ret

00000132 <stepper_step>:
}

//Step the motor
void stepper_step() {
	// Send a pulse to the step pin
	PORTD |= (1 << STEP_PIN);   // Set step pin high
 132:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <stepper_step+0x4>
 13a:	00 00       	nop
	_delay_us(1);               // Short delay
	PORTD &= ~(1 << STEP_PIN);  // Set step pin low
 13c:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <stepper_step+0x10>
 146:	00 c0       	rjmp	.+0      	; 0x148 <stepper_step+0x16>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <hx711_init>:
}

// Initialize HX711
void hx711_init() {
	// Set HX711 pins
	DDRD &= ~(1 << HX711_DOUT);  // Set DOUT as input (PD6)
 14c:	56 98       	cbi	0x0a, 6	; 10
	DDRD |= (1 << HX711_SCK);    // Set SCK as output (PD7)
 14e:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1 << HX711_SCK);   // Set SCK high (power down)
 150:	5f 9a       	sbi	0x0b, 7	; 11
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	81 ee       	ldi	r24, 0xE1	; 225
 156:	94 e0       	ldi	r25, 0x04	; 4
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <hx711_init+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <hx711_init+0x16>
 162:	00 00       	nop
	_delay_ms(100);              // Wait for power-up
	PORTD &= ~(1 << HX711_SCK);  // Set SCK low (ready to read)
 164:	5f 98       	cbi	0x0b, 7	; 11
 166:	08 95       	ret

00000168 <hx711_read>:

// Read raw data from HX711
long hx711_read() {
	long result = 0;
	// Wait for DOUT to be low
	while (PIND & (1 << HX711_DOUT));
 168:	4e 99       	sbic	0x09, 6	; 9
 16a:	fe cf       	rjmp	.-4      	; 0x168 <hx711_read>
 16c:	28 e1       	ldi	r18, 0x18	; 24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	dc 01       	movw	r26, r24
	
	// Read 24 bits of data
	for (int i = 0; i < 24; i++) {
		PORTD |= (1 << HX711_SCK);  // Set SCK high
 176:	5f 9a       	sbi	0x0b, 7	; 11
		result = result << 1;
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
		PORTD &= ~(1 << HX711_SCK); // Set SCK low
 180:	5f 98       	cbi	0x0b, 7	; 11
		if (PIND & (1 << HX711_DOUT)) {
 182:	4e 9b       	sbis	0x09, 6	; 9
 184:	03 c0       	rjmp	.+6      	; 0x18c <hx711_read+0x24>
			result++;
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a1 1d       	adc	r26, r1
 18a:	b1 1d       	adc	r27, r1
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	31 09       	sbc	r19, r1
	long result = 0;
	// Wait for DOUT to be low
	while (PIND & (1 << HX711_DOUT));
	
	// Read 24 bits of data
	for (int i = 0; i < 24; i++) {
 190:	91 f7       	brne	.-28     	; 0x176 <hx711_read+0xe>
			result++;
		}
	}
	
	// Set the gain to 128 (1 additional clock pulse)
	PORTD |= (1 << HX711_SCK);  // Set SCK high
 192:	5f 9a       	sbi	0x0b, 7	; 11
	result = result ^ 0x800000; // Convert to signed 24-bit integer
	PORTD &= ~(1 << HX711_SCK); // Set SCK low
 194:	5f 98       	cbi	0x0b, 7	; 11

	return result;
 196:	bc 01       	movw	r22, r24
 198:	cd 01       	movw	r24, r26
 19a:	80 58       	subi	r24, 0x80	; 128
}
 19c:	08 95       	ret

0000019e <setup_interrupt>:

// Initialize Pin Change Interrupt for PB0
void setup_interrupt() {
	// Enable Pin Change Interrupt for PB0 (part of Port B)
	PCICR |= (1 << PCIE0);    // Enable pin change interrupt for PCINT[7:0] (Port B)
 19e:	e8 e6       	ldi	r30, 0x68	; 104
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1);  // Enable interrupt for PCINT0 (PB0) and PCINT1 (PB1)
 1a8:	eb e6       	ldi	r30, 0x6B	; 107
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
 1b2:	78 94       	sei
 1b4:	08 95       	ret

000001b6 <__vector_3>:
}

// ISR for Pin Change Interrupt on Port B
ISR(PCINT0_vect) {
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	80 e7       	ldi	r24, 0x70	; 112
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <__vector_3+0x28>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__vector_3+0x32>
 1e8:	00 00       	nop
	debounce_delay();  // Wait for bouncing to settle
	// Check which pin caused the interrupt
	if ((PINB & (1 << PCINT0))) {
 1ea:	18 9b       	sbis	0x03, 0	; 3
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <__vector_3+0x48>
		// PB0 triggered the interrupt
		stepper_set_direction(1);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	9a df       	rcall	.-204    	; 0x126 <stepper_set_direction>
		while(!(PINB & (1 << PCINT1))){ // Rotate clockwise
 1f2:	19 99       	sbic	0x03, 1	; 3
			 stepper_step();
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <__vector_3+0x56>
 1f6:	9d df       	rcall	.-198    	; 0x132 <stepper_step>
	debounce_delay();  // Wait for bouncing to settle
	// Check which pin caused the interrupt
	if ((PINB & (1 << PCINT0))) {
		// PB0 triggered the interrupt
		stepper_set_direction(1);
		while(!(PINB & (1 << PCINT1))){ // Rotate clockwise
 1f8:	19 9b       	sbis	0x03, 1	; 3
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <__vector_3+0x40>
			 stepper_step();
			 }//Uncomment this if you want to use this as a safety button
		}
	else  {
		// PB0 triggered the interrupt
		stepper_set_direction(0);
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__vector_3+0x56>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
		while(!(PINB & (1 << PCINT1))){ // Rotate clockwise
 200:	92 df       	rcall	.-220    	; 0x126 <stepper_set_direction>
 202:	19 99       	sbic	0x03, 1	; 3
			stepper_step();
 204:	03 c0       	rjmp	.+6      	; 0x20c <__vector_3+0x56>
 206:	95 df       	rcall	.-214    	; 0x132 <stepper_step>
			 }//Uncomment this if you want to use this as a safety button
		}
	else  {
		// PB0 triggered the interrupt
		stepper_set_direction(0);
		while(!(PINB & (1 << PCINT1))){ // Rotate clockwise
 208:	19 9b       	sbis	0x03, 1	; 3
 20a:	fd cf       	rjmp	.-6      	; 0x206 <__vector_3+0x50>
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <__vector_3+0x5c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__vector_3+0x66>
 21c:	00 00       	nop
		}//Uncomment this if you want to use this as a safety button
	}
		
		_delay_ms(50);
		
	}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <setup>:
	
	
void setup(){
	// Set the CPU frequency and initialize UART
	uart_init(MYUBRR);
 240:	87 e6       	ldi	r24, 0x67	; 103
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	2d df       	rcall	.-422    	; 0xa0 <uart_init>

	// Redirect stdout to UART
	stdout = &uart_output;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x3>
 24e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end+0x2>

	// Set PB0 as output for LED
	DDRB |= (1 << safety_btn);
	
	//Initialize the the motor
	stepper_init();
 252:	20 9a       	sbi	0x04, 0	; 4
	
	//Initialize Push Buttons
	push_buttons();
 254:	63 df       	rcall	.-314    	; 0x11c <stepper_init>
	
	// Initialize HX711
	hx711_init();
 256:	59 df       	rcall	.-334    	; 0x10a <push_buttons>
 258:	79 df       	rcall	.-270    	; 0x14c <hx711_init>
	
	setup_interrupt();
 25a:	a1 cf       	rjmp	.-190    	; 0x19e <setup_interrupt>
 25c:	08 95       	ret

0000025e <main>:
 25e:	cf 93       	push	r28
}




int main(void) {
 260:	df 93       	push	r29
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	6e 97       	sbiw	r28, 0x1e	; 30
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
	setup();
 272:	e6 df       	rcall	.-52     	; 0x240 <setup>
	uart_init(MYUBRR);    // Initialize UART
 274:	87 e6       	ldi	r24, 0x67	; 103
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	13 df       	rcall	.-474    	; 0xa0 <uart_init>

	uint32_t previous_weight = 0;  // Variable to store the previous weight reading
 27a:	c1 2c       	mov	r12, r1
 27c:	d1 2c       	mov	r13, r1
 27e:	76 01       	movw	r14, r12
			}//Uncomment this if you want to use this as a safety button
			previous_weight = 0;  // Variable to store the previous weight reading

		}
		else {
			snprintf(buffer, sizeof(buffer), "neutral: %ld\n", weight_difference);
 280:	0f 2e       	mov	r0, r31
 282:	fc e2       	ldi	r31, 0x2C	; 44
 284:	af 2e       	mov	r10, r31
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	bf 2e       	mov	r11, r31
 28a:	f0 2d       	mov	r31, r0
 28c:	0f 2e       	mov	r0, r31
 28e:	fe e1       	ldi	r31, 0x1E	; 30
 290:	3f 2e       	mov	r3, r31
 292:	f0 2d       	mov	r31, r0
 294:	8e 01       	movw	r16, r28
 296:	0f 5f       	subi	r16, 0xFF	; 255
 298:	1f 4f       	sbci	r17, 0xFF	; 255
		char buffer[30];
		// Check if the difference is positive or negative and print accordingly
		if ((previous_weight != 0) && (weight_difference > 50000)) {
			//previous_weight = current_weight;  // Update the previous weight

			snprintf(buffer, sizeof(buffer), "positive: %ld\n", weight_difference);
 29a:	0f 2e       	mov	r0, r31
 29c:	fe e0       	ldi	r31, 0x0E	; 14
 29e:	8f 2e       	mov	r8, r31
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	9f 2e       	mov	r9, r31
	uart_init(MYUBRR);    // Initialize UART

	uint32_t previous_weight = 0;  // Variable to store the previous weight reading

	while (1) {
		uint32_t current_weight = hx711_read();  // Read weight from HX711
 2a4:	f0 2d       	mov	r31, r0
 2a6:	60 df       	rcall	.-320    	; 0x168 <hx711_read>
 2a8:	2b 01       	movw	r4, r22
 2aa:	3c 01       	movw	r6, r24
		int32_t weight_difference = current_weight - previous_weight;  // Calculate the difference
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	8c 19       	sub	r24, r12
 2b2:	9d 09       	sbc	r25, r13
 2b4:	ae 09       	sbc	r26, r14
 2b6:	bf 09       	sbc	r27, r15
		
		// Convert weight difference to a string and transmit via UART
		char buffer[30];
		// Check if the difference is positive or negative and print accordingly
		if ((previous_weight != 0) && (weight_difference > 50000)) {
 2b8:	cd 28       	or	r12, r13
 2ba:	ce 28       	or	r12, r14
 2bc:	cf 28       	or	r12, r15
 2be:	09 f4       	brne	.+2      	; 0x2c2 <main+0x64>
 2c0:	55 c0       	rjmp	.+170    	; 0x36c <main+0x10e>
 2c2:	81 35       	cpi	r24, 0x51	; 81
 2c4:	23 ec       	ldi	r18, 0xC3	; 195
 2c6:	92 07       	cpc	r25, r18
 2c8:	a1 05       	cpc	r26, r1
 2ca:	b1 05       	cpc	r27, r1
 2cc:	1c f1       	brlt	.+70     	; 0x314 <main+0xb6>
			//previous_weight = current_weight;  // Update the previous weight

			snprintf(buffer, sizeof(buffer), "positive: %ld\n", weight_difference);
 2ce:	bf 93       	push	r27
 2d0:	af 93       	push	r26
 2d2:	9f 93       	push	r25
 2d4:	8f 93       	push	r24
 2d6:	9f 92       	push	r9
 2d8:	8f 92       	push	r8
 2da:	1f 92       	push	r1
 2dc:	3f 92       	push	r3
 2de:	1f 93       	push	r17
 2e0:	0f 93       	push	r16
			uart_transmit_string(buffer);
 2e2:	62 d0       	rcall	.+196    	; 0x3a8 <snprintf>
 2e4:	c8 01       	movw	r24, r16
 2e6:	ef de       	rcall	.-546    	; 0xc6 <uart_transmit_string>
			stepper_set_direction(0);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	1d df       	rcall	.-454    	; 0x126 <stepper_set_direction>
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	0f 2e       	mov	r0, r31
 2f8:	fa e0       	ldi	r31, 0x0A	; 10
 2fa:	ef 2e       	mov	r14, r31
 2fc:	f1 2c       	mov	r15, r1
 2fe:	f0 2d       	mov	r31, r0
			for (int i = 0; i < 10; i++){ // Rotate clockwise
				stepper_step();
 300:	18 df       	rcall	.-464    	; 0x132 <stepper_step>
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	e9 1a       	sub	r14, r25
 306:	f1 08       	sbc	r15, r1
 308:	d9 f7       	brne	.-10     	; 0x300 <main+0xa2>
			//previous_weight = current_weight;  // Update the previous weight

			snprintf(buffer, sizeof(buffer), "positive: %ld\n", weight_difference);
			uart_transmit_string(buffer);
			stepper_set_direction(0);
			for (int i = 0; i < 10; i++){ // Rotate clockwise
 30a:	c1 2c       	mov	r12, r1
				stepper_step();
				
			}//Uncomment this if you want to use this as a safety button
			previous_weight = 0;  // Variable to store the previous weight reading
 30c:	d1 2c       	mov	r13, r1
 30e:	e1 2c       	mov	r14, r1
 310:	f1 2c       	mov	r15, r1
 312:	40 c0       	rjmp	.+128    	; 0x394 <main+0x136>
 314:	80 3b       	cpi	r24, 0xB0	; 176

			} 
			else if ((previous_weight != 0) && weight_difference < -50000) {
 316:	2c e3       	ldi	r18, 0x3C	; 60
 318:	92 07       	cpc	r25, r18
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	a2 07       	cpc	r26, r18
 31e:	b2 07       	cpc	r27, r18
 320:	2c f5       	brge	.+74     	; 0x36c <main+0x10e>
 322:	bf 93       	push	r27
			//previous_weight = current_weight;  // Update the previous weight

			snprintf(buffer, sizeof(buffer), "negative: %ld\n", weight_difference);
 324:	af 93       	push	r26
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	8d e1       	ldi	r24, 0x1D	; 29
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	9f 93       	push	r25
 330:	8f 93       	push	r24
 332:	1f 92       	push	r1
 334:	3f 92       	push	r3
 336:	1f 93       	push	r17
 338:	0f 93       	push	r16
			uart_transmit_string(buffer);
 33a:	36 d0       	rcall	.+108    	; 0x3a8 <snprintf>
 33c:	c8 01       	movw	r24, r16
 33e:	c3 de       	rcall	.-634    	; 0xc6 <uart_transmit_string>
			stepper_set_direction(1);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	f1 de       	rcall	.-542    	; 0x126 <stepper_set_direction>
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	0f 2e       	mov	r0, r31
 350:	fa e0       	ldi	r31, 0x0A	; 10
 352:	ef 2e       	mov	r14, r31
 354:	f1 2c       	mov	r15, r1
 356:	f0 2d       	mov	r31, r0
			for (int i = 0; i < 10; i++){ // Rotate clockwise
				stepper_step();
 358:	ec de       	rcall	.-552    	; 0x132 <stepper_step>
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	e9 1a       	sub	r14, r25
 35e:	f1 08       	sbc	r15, r1
 360:	d9 f7       	brne	.-10     	; 0x358 <main+0xfa>
			//previous_weight = current_weight;  // Update the previous weight

			snprintf(buffer, sizeof(buffer), "negative: %ld\n", weight_difference);
			uart_transmit_string(buffer);
			stepper_set_direction(1);
			for (int i = 0; i < 10; i++){ // Rotate clockwise
 362:	c1 2c       	mov	r12, r1
				stepper_step();
				
			}//Uncomment this if you want to use this as a safety button
			previous_weight = 0;  // Variable to store the previous weight reading
 364:	d1 2c       	mov	r13, r1
 366:	e1 2c       	mov	r14, r1
 368:	f1 2c       	mov	r15, r1
 36a:	14 c0       	rjmp	.+40     	; 0x394 <main+0x136>

		}
		else {
			snprintf(buffer, sizeof(buffer), "neutral: %ld\n", weight_difference);
 36c:	bf 93       	push	r27
 36e:	af 93       	push	r26
 370:	9f 93       	push	r25
 372:	8f 93       	push	r24
 374:	bf 92       	push	r11
 376:	af 92       	push	r10
 378:	1f 92       	push	r1
 37a:	3f 92       	push	r3
 37c:	1f 93       	push	r17
 37e:	0f 93       	push	r16
 380:	13 d0       	rcall	.+38     	; 0x3a8 <snprintf>
			uart_transmit_string(buffer);
 382:	c8 01       	movw	r24, r16
 384:	a0 de       	rcall	.-704    	; 0xc6 <uart_transmit_string>
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	73 01       	movw	r14, r6
			previous_weight = current_weight;  // Update the previous weight
 392:	62 01       	movw	r12, r4
 394:	9f ef       	ldi	r25, 0xFF	; 255
 396:	29 e6       	ldi	r18, 0x69	; 105
 398:	88 e1       	ldi	r24, 0x18	; 24
 39a:	91 50       	subi	r25, 0x01	; 1
 39c:	20 40       	sbci	r18, 0x00	; 0
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x13c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x146>
 3a4:	00 00       	nop
 3a6:	7f cf       	rjmp	.-258    	; 0x2a6 <main+0x48>

000003a8 <snprintf>:
		}

		_delay_ms(500);  // Wait for 100ms before the next reading
		
		
	}
 3a8:	ae e0       	ldi	r26, 0x0E	; 14
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e9 ed       	ldi	r30, 0xD9	; 217
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	b8 c2       	rjmp	.+1392   	; 0x922 <__prologue_saves__+0x1c>
 3b2:	0d 89       	ldd	r16, Y+21	; 0x15
 3b4:	1e 89       	ldd	r17, Y+22	; 0x16
 3b6:	8f 89       	ldd	r24, Y+23	; 0x17
 3b8:	98 8d       	ldd	r25, Y+24	; 0x18
 3ba:	26 e0       	ldi	r18, 0x06	; 6
 3bc:	2c 83       	std	Y+4, r18	; 0x04
 3be:	1a 83       	std	Y+2, r17	; 0x02
 3c0:	09 83       	std	Y+1, r16	; 0x01
 3c2:	97 ff       	sbrs	r25, 7
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <snprintf+0x22>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e8       	ldi	r25, 0x80	; 128
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	9e 83       	std	Y+6, r25	; 0x06
 3ce:	8d 83       	std	Y+5, r24	; 0x05
 3d0:	ae 01       	movw	r20, r28
 3d2:	45 5e       	subi	r20, 0xE5	; 229
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	69 8d       	ldd	r22, Y+25	; 0x19
 3d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	11 d0       	rcall	.+34     	; 0x402 <vfprintf>
 3e0:	4d 81       	ldd	r20, Y+5	; 0x05
 3e2:	5e 81       	ldd	r21, Y+6	; 0x06
 3e4:	57 fd       	sbrc	r21, 7
 3e6:	0a c0       	rjmp	.+20     	; 0x3fc <snprintf+0x54>
 3e8:	2f 81       	ldd	r18, Y+7	; 0x07
 3ea:	38 85       	ldd	r19, Y+8	; 0x08
 3ec:	42 17       	cp	r20, r18
 3ee:	53 07       	cpc	r21, r19
 3f0:	0c f4       	brge	.+2      	; 0x3f4 <snprintf+0x4c>
 3f2:	9a 01       	movw	r18, r20
 3f4:	f8 01       	movw	r30, r16
 3f6:	e2 0f       	add	r30, r18
 3f8:	f3 1f       	adc	r31, r19
 3fa:	10 82       	st	Z, r1
 3fc:	2e 96       	adiw	r28, 0x0e	; 14
 3fe:	e4 e0       	ldi	r30, 0x04	; 4
 400:	ac c2       	rjmp	.+1368   	; 0x95a <__epilogue_restores__+0x1c>

00000402 <vfprintf>:
 402:	ab e0       	ldi	r26, 0x0B	; 11
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e6 e0       	ldi	r30, 0x06	; 6
 408:	f2 e0       	ldi	r31, 0x02	; 2
 40a:	7d c2       	rjmp	.+1274   	; 0x906 <__prologue_saves__>
 40c:	6c 01       	movw	r12, r24
 40e:	7b 01       	movw	r14, r22
 410:	8a 01       	movw	r16, r20
 412:	fc 01       	movw	r30, r24
 414:	17 82       	std	Z+7, r1	; 0x07
 416:	16 82       	std	Z+6, r1	; 0x06
 418:	83 81       	ldd	r24, Z+3	; 0x03
 41a:	81 ff       	sbrs	r24, 1
 41c:	bf c1       	rjmp	.+894    	; 0x79c <vfprintf+0x39a>
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	3c 01       	movw	r6, r24
 424:	f6 01       	movw	r30, r12
 426:	93 81       	ldd	r25, Z+3	; 0x03
 428:	f7 01       	movw	r30, r14
 42a:	93 fd       	sbrc	r25, 3
 42c:	85 91       	lpm	r24, Z+
 42e:	93 ff       	sbrs	r25, 3
 430:	81 91       	ld	r24, Z+
 432:	7f 01       	movw	r14, r30
 434:	88 23       	and	r24, r24
 436:	09 f4       	brne	.+2      	; 0x43a <vfprintf+0x38>
 438:	ad c1       	rjmp	.+858    	; 0x794 <vfprintf+0x392>
 43a:	85 32       	cpi	r24, 0x25	; 37
 43c:	39 f4       	brne	.+14     	; 0x44c <vfprintf+0x4a>
 43e:	93 fd       	sbrc	r25, 3
 440:	85 91       	lpm	r24, Z+
 442:	93 ff       	sbrs	r25, 3
 444:	81 91       	ld	r24, Z+
 446:	7f 01       	movw	r14, r30
 448:	85 32       	cpi	r24, 0x25	; 37
 44a:	21 f4       	brne	.+8      	; 0x454 <vfprintf+0x52>
 44c:	b6 01       	movw	r22, r12
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	c0 d1       	rcall	.+896    	; 0x7d2 <fputc>
 452:	e8 cf       	rjmp	.-48     	; 0x424 <vfprintf+0x22>
 454:	91 2c       	mov	r9, r1
 456:	21 2c       	mov	r2, r1
 458:	31 2c       	mov	r3, r1
 45a:	ff e1       	ldi	r31, 0x1F	; 31
 45c:	f3 15       	cp	r31, r3
 45e:	d8 f0       	brcs	.+54     	; 0x496 <vfprintf+0x94>
 460:	8b 32       	cpi	r24, 0x2B	; 43
 462:	79 f0       	breq	.+30     	; 0x482 <vfprintf+0x80>
 464:	38 f4       	brcc	.+14     	; 0x474 <vfprintf+0x72>
 466:	80 32       	cpi	r24, 0x20	; 32
 468:	79 f0       	breq	.+30     	; 0x488 <vfprintf+0x86>
 46a:	83 32       	cpi	r24, 0x23	; 35
 46c:	a1 f4       	brne	.+40     	; 0x496 <vfprintf+0x94>
 46e:	23 2d       	mov	r18, r3
 470:	20 61       	ori	r18, 0x10	; 16
 472:	1d c0       	rjmp	.+58     	; 0x4ae <vfprintf+0xac>
 474:	8d 32       	cpi	r24, 0x2D	; 45
 476:	61 f0       	breq	.+24     	; 0x490 <vfprintf+0x8e>
 478:	80 33       	cpi	r24, 0x30	; 48
 47a:	69 f4       	brne	.+26     	; 0x496 <vfprintf+0x94>
 47c:	23 2d       	mov	r18, r3
 47e:	21 60       	ori	r18, 0x01	; 1
 480:	16 c0       	rjmp	.+44     	; 0x4ae <vfprintf+0xac>
 482:	83 2d       	mov	r24, r3
 484:	82 60       	ori	r24, 0x02	; 2
 486:	38 2e       	mov	r3, r24
 488:	e3 2d       	mov	r30, r3
 48a:	e4 60       	ori	r30, 0x04	; 4
 48c:	3e 2e       	mov	r3, r30
 48e:	2a c0       	rjmp	.+84     	; 0x4e4 <vfprintf+0xe2>
 490:	f3 2d       	mov	r31, r3
 492:	f8 60       	ori	r31, 0x08	; 8
 494:	1d c0       	rjmp	.+58     	; 0x4d0 <vfprintf+0xce>
 496:	37 fc       	sbrc	r3, 7
 498:	2d c0       	rjmp	.+90     	; 0x4f4 <vfprintf+0xf2>
 49a:	20 ed       	ldi	r18, 0xD0	; 208
 49c:	28 0f       	add	r18, r24
 49e:	2a 30       	cpi	r18, 0x0A	; 10
 4a0:	40 f0       	brcs	.+16     	; 0x4b2 <vfprintf+0xb0>
 4a2:	8e 32       	cpi	r24, 0x2E	; 46
 4a4:	b9 f4       	brne	.+46     	; 0x4d4 <vfprintf+0xd2>
 4a6:	36 fc       	sbrc	r3, 6
 4a8:	75 c1       	rjmp	.+746    	; 0x794 <vfprintf+0x392>
 4aa:	23 2d       	mov	r18, r3
 4ac:	20 64       	ori	r18, 0x40	; 64
 4ae:	32 2e       	mov	r3, r18
 4b0:	19 c0       	rjmp	.+50     	; 0x4e4 <vfprintf+0xe2>
 4b2:	36 fe       	sbrs	r3, 6
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <vfprintf+0xc0>
 4b6:	8a e0       	ldi	r24, 0x0A	; 10
 4b8:	98 9e       	mul	r9, r24
 4ba:	20 0d       	add	r18, r0
 4bc:	11 24       	eor	r1, r1
 4be:	92 2e       	mov	r9, r18
 4c0:	11 c0       	rjmp	.+34     	; 0x4e4 <vfprintf+0xe2>
 4c2:	ea e0       	ldi	r30, 0x0A	; 10
 4c4:	2e 9e       	mul	r2, r30
 4c6:	20 0d       	add	r18, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	22 2e       	mov	r2, r18
 4cc:	f3 2d       	mov	r31, r3
 4ce:	f0 62       	ori	r31, 0x20	; 32
 4d0:	3f 2e       	mov	r3, r31
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <vfprintf+0xe2>
 4d4:	8c 36       	cpi	r24, 0x6C	; 108
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <vfprintf+0xde>
 4d8:	83 2d       	mov	r24, r3
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	38 2e       	mov	r3, r24
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <vfprintf+0xe2>
 4e0:	88 36       	cpi	r24, 0x68	; 104
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <vfprintf+0xf2>
 4e4:	f7 01       	movw	r30, r14
 4e6:	93 fd       	sbrc	r25, 3
 4e8:	85 91       	lpm	r24, Z+
 4ea:	93 ff       	sbrs	r25, 3
 4ec:	81 91       	ld	r24, Z+
 4ee:	7f 01       	movw	r14, r30
 4f0:	81 11       	cpse	r24, r1
 4f2:	b3 cf       	rjmp	.-154    	; 0x45a <vfprintf+0x58>
 4f4:	98 2f       	mov	r25, r24
 4f6:	9f 7d       	andi	r25, 0xDF	; 223
 4f8:	95 54       	subi	r25, 0x45	; 69
 4fa:	93 30       	cpi	r25, 0x03	; 3
 4fc:	28 f4       	brcc	.+10     	; 0x508 <vfprintf+0x106>
 4fe:	0c 5f       	subi	r16, 0xFC	; 252
 500:	1f 4f       	sbci	r17, 0xFF	; 255
 502:	9f e3       	ldi	r25, 0x3F	; 63
 504:	99 83       	std	Y+1, r25	; 0x01
 506:	0d c0       	rjmp	.+26     	; 0x522 <vfprintf+0x120>
 508:	83 36       	cpi	r24, 0x63	; 99
 50a:	31 f0       	breq	.+12     	; 0x518 <vfprintf+0x116>
 50c:	83 37       	cpi	r24, 0x73	; 115
 50e:	71 f0       	breq	.+28     	; 0x52c <vfprintf+0x12a>
 510:	83 35       	cpi	r24, 0x53	; 83
 512:	09 f0       	breq	.+2      	; 0x516 <vfprintf+0x114>
 514:	55 c0       	rjmp	.+170    	; 0x5c0 <vfprintf+0x1be>
 516:	20 c0       	rjmp	.+64     	; 0x558 <vfprintf+0x156>
 518:	f8 01       	movw	r30, r16
 51a:	80 81       	ld	r24, Z
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	0e 5f       	subi	r16, 0xFE	; 254
 520:	1f 4f       	sbci	r17, 0xFF	; 255
 522:	88 24       	eor	r8, r8
 524:	83 94       	inc	r8
 526:	91 2c       	mov	r9, r1
 528:	53 01       	movw	r10, r6
 52a:	12 c0       	rjmp	.+36     	; 0x550 <vfprintf+0x14e>
 52c:	28 01       	movw	r4, r16
 52e:	f2 e0       	ldi	r31, 0x02	; 2
 530:	4f 0e       	add	r4, r31
 532:	51 1c       	adc	r5, r1
 534:	f8 01       	movw	r30, r16
 536:	a0 80       	ld	r10, Z
 538:	b1 80       	ldd	r11, Z+1	; 0x01
 53a:	36 fe       	sbrs	r3, 6
 53c:	03 c0       	rjmp	.+6      	; 0x544 <vfprintf+0x142>
 53e:	69 2d       	mov	r22, r9
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <vfprintf+0x146>
 544:	6f ef       	ldi	r22, 0xFF	; 255
 546:	7f ef       	ldi	r23, 0xFF	; 255
 548:	c5 01       	movw	r24, r10
 54a:	38 d1       	rcall	.+624    	; 0x7bc <strnlen>
 54c:	4c 01       	movw	r8, r24
 54e:	82 01       	movw	r16, r4
 550:	f3 2d       	mov	r31, r3
 552:	ff 77       	andi	r31, 0x7F	; 127
 554:	3f 2e       	mov	r3, r31
 556:	15 c0       	rjmp	.+42     	; 0x582 <vfprintf+0x180>
 558:	28 01       	movw	r4, r16
 55a:	22 e0       	ldi	r18, 0x02	; 2
 55c:	42 0e       	add	r4, r18
 55e:	51 1c       	adc	r5, r1
 560:	f8 01       	movw	r30, r16
 562:	a0 80       	ld	r10, Z
 564:	b1 80       	ldd	r11, Z+1	; 0x01
 566:	36 fe       	sbrs	r3, 6
 568:	03 c0       	rjmp	.+6      	; 0x570 <vfprintf+0x16e>
 56a:	69 2d       	mov	r22, r9
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <vfprintf+0x172>
 570:	6f ef       	ldi	r22, 0xFF	; 255
 572:	7f ef       	ldi	r23, 0xFF	; 255
 574:	c5 01       	movw	r24, r10
 576:	17 d1       	rcall	.+558    	; 0x7a6 <strnlen_P>
 578:	4c 01       	movw	r8, r24
 57a:	f3 2d       	mov	r31, r3
 57c:	f0 68       	ori	r31, 0x80	; 128
 57e:	3f 2e       	mov	r3, r31
 580:	82 01       	movw	r16, r4
 582:	33 fc       	sbrc	r3, 3
 584:	19 c0       	rjmp	.+50     	; 0x5b8 <vfprintf+0x1b6>
 586:	82 2d       	mov	r24, r2
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	88 16       	cp	r8, r24
 58c:	99 06       	cpc	r9, r25
 58e:	a0 f4       	brcc	.+40     	; 0x5b8 <vfprintf+0x1b6>
 590:	b6 01       	movw	r22, r12
 592:	80 e2       	ldi	r24, 0x20	; 32
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	1d d1       	rcall	.+570    	; 0x7d2 <fputc>
 598:	2a 94       	dec	r2
 59a:	f5 cf       	rjmp	.-22     	; 0x586 <vfprintf+0x184>
 59c:	f5 01       	movw	r30, r10
 59e:	37 fc       	sbrc	r3, 7
 5a0:	85 91       	lpm	r24, Z+
 5a2:	37 fe       	sbrs	r3, 7
 5a4:	81 91       	ld	r24, Z+
 5a6:	5f 01       	movw	r10, r30
 5a8:	b6 01       	movw	r22, r12
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	12 d1       	rcall	.+548    	; 0x7d2 <fputc>
 5ae:	21 10       	cpse	r2, r1
 5b0:	2a 94       	dec	r2
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	82 1a       	sub	r8, r18
 5b6:	91 08       	sbc	r9, r1
 5b8:	81 14       	cp	r8, r1
 5ba:	91 04       	cpc	r9, r1
 5bc:	79 f7       	brne	.-34     	; 0x59c <vfprintf+0x19a>
 5be:	e1 c0       	rjmp	.+450    	; 0x782 <vfprintf+0x380>
 5c0:	84 36       	cpi	r24, 0x64	; 100
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <vfprintf+0x1c6>
 5c4:	89 36       	cpi	r24, 0x69	; 105
 5c6:	39 f5       	brne	.+78     	; 0x616 <vfprintf+0x214>
 5c8:	f8 01       	movw	r30, r16
 5ca:	37 fe       	sbrs	r3, 7
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <vfprintf+0x1da>
 5ce:	60 81       	ld	r22, Z
 5d0:	71 81       	ldd	r23, Z+1	; 0x01
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	0c 5f       	subi	r16, 0xFC	; 252
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <vfprintf+0x1ea>
 5dc:	60 81       	ld	r22, Z
 5de:	71 81       	ldd	r23, Z+1	; 0x01
 5e0:	07 2e       	mov	r0, r23
 5e2:	00 0c       	add	r0, r0
 5e4:	88 0b       	sbc	r24, r24
 5e6:	99 0b       	sbc	r25, r25
 5e8:	0e 5f       	subi	r16, 0xFE	; 254
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	f3 2d       	mov	r31, r3
 5ee:	ff 76       	andi	r31, 0x6F	; 111
 5f0:	3f 2e       	mov	r3, r31
 5f2:	97 ff       	sbrs	r25, 7
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <vfprintf+0x206>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	f0 68       	ori	r31, 0x80	; 128
 606:	3f 2e       	mov	r3, r31
 608:	2a e0       	ldi	r18, 0x0A	; 10
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a3 01       	movw	r20, r6
 60e:	1d d1       	rcall	.+570    	; 0x84a <__ultoa_invert>
 610:	88 2e       	mov	r8, r24
 612:	86 18       	sub	r8, r6
 614:	44 c0       	rjmp	.+136    	; 0x69e <vfprintf+0x29c>
 616:	85 37       	cpi	r24, 0x75	; 117
 618:	31 f4       	brne	.+12     	; 0x626 <vfprintf+0x224>
 61a:	23 2d       	mov	r18, r3
 61c:	2f 7e       	andi	r18, 0xEF	; 239
 61e:	b2 2e       	mov	r11, r18
 620:	2a e0       	ldi	r18, 0x0A	; 10
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	25 c0       	rjmp	.+74     	; 0x670 <vfprintf+0x26e>
 626:	93 2d       	mov	r25, r3
 628:	99 7f       	andi	r25, 0xF9	; 249
 62a:	b9 2e       	mov	r11, r25
 62c:	8f 36       	cpi	r24, 0x6F	; 111
 62e:	c1 f0       	breq	.+48     	; 0x660 <vfprintf+0x25e>
 630:	18 f4       	brcc	.+6      	; 0x638 <vfprintf+0x236>
 632:	88 35       	cpi	r24, 0x58	; 88
 634:	79 f0       	breq	.+30     	; 0x654 <vfprintf+0x252>
 636:	ae c0       	rjmp	.+348    	; 0x794 <vfprintf+0x392>
 638:	80 37       	cpi	r24, 0x70	; 112
 63a:	19 f0       	breq	.+6      	; 0x642 <vfprintf+0x240>
 63c:	88 37       	cpi	r24, 0x78	; 120
 63e:	21 f0       	breq	.+8      	; 0x648 <vfprintf+0x246>
 640:	a9 c0       	rjmp	.+338    	; 0x794 <vfprintf+0x392>
 642:	e9 2f       	mov	r30, r25
 644:	e0 61       	ori	r30, 0x10	; 16
 646:	be 2e       	mov	r11, r30
 648:	b4 fe       	sbrs	r11, 4
 64a:	0d c0       	rjmp	.+26     	; 0x666 <vfprintf+0x264>
 64c:	fb 2d       	mov	r31, r11
 64e:	f4 60       	ori	r31, 0x04	; 4
 650:	bf 2e       	mov	r11, r31
 652:	09 c0       	rjmp	.+18     	; 0x666 <vfprintf+0x264>
 654:	34 fe       	sbrs	r3, 4
 656:	0a c0       	rjmp	.+20     	; 0x66c <vfprintf+0x26a>
 658:	29 2f       	mov	r18, r25
 65a:	26 60       	ori	r18, 0x06	; 6
 65c:	b2 2e       	mov	r11, r18
 65e:	06 c0       	rjmp	.+12     	; 0x66c <vfprintf+0x26a>
 660:	28 e0       	ldi	r18, 0x08	; 8
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	05 c0       	rjmp	.+10     	; 0x670 <vfprintf+0x26e>
 666:	20 e1       	ldi	r18, 0x10	; 16
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <vfprintf+0x26e>
 66c:	20 e1       	ldi	r18, 0x10	; 16
 66e:	32 e0       	ldi	r19, 0x02	; 2
 670:	f8 01       	movw	r30, r16
 672:	b7 fe       	sbrs	r11, 7
 674:	07 c0       	rjmp	.+14     	; 0x684 <vfprintf+0x282>
 676:	60 81       	ld	r22, Z
 678:	71 81       	ldd	r23, Z+1	; 0x01
 67a:	82 81       	ldd	r24, Z+2	; 0x02
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	0c 5f       	subi	r16, 0xFC	; 252
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	06 c0       	rjmp	.+12     	; 0x690 <vfprintf+0x28e>
 684:	60 81       	ld	r22, Z
 686:	71 81       	ldd	r23, Z+1	; 0x01
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 5f       	subi	r16, 0xFE	; 254
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	a3 01       	movw	r20, r6
 692:	db d0       	rcall	.+438    	; 0x84a <__ultoa_invert>
 694:	88 2e       	mov	r8, r24
 696:	86 18       	sub	r8, r6
 698:	fb 2d       	mov	r31, r11
 69a:	ff 77       	andi	r31, 0x7F	; 127
 69c:	3f 2e       	mov	r3, r31
 69e:	36 fe       	sbrs	r3, 6
 6a0:	0d c0       	rjmp	.+26     	; 0x6bc <vfprintf+0x2ba>
 6a2:	23 2d       	mov	r18, r3
 6a4:	2e 7f       	andi	r18, 0xFE	; 254
 6a6:	a2 2e       	mov	r10, r18
 6a8:	89 14       	cp	r8, r9
 6aa:	58 f4       	brcc	.+22     	; 0x6c2 <vfprintf+0x2c0>
 6ac:	34 fe       	sbrs	r3, 4
 6ae:	0b c0       	rjmp	.+22     	; 0x6c6 <vfprintf+0x2c4>
 6b0:	32 fc       	sbrc	r3, 2
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <vfprintf+0x2c4>
 6b4:	83 2d       	mov	r24, r3
 6b6:	8e 7e       	andi	r24, 0xEE	; 238
 6b8:	a8 2e       	mov	r10, r24
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <vfprintf+0x2c4>
 6bc:	b8 2c       	mov	r11, r8
 6be:	a3 2c       	mov	r10, r3
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <vfprintf+0x2c6>
 6c2:	b8 2c       	mov	r11, r8
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <vfprintf+0x2c6>
 6c6:	b9 2c       	mov	r11, r9
 6c8:	a4 fe       	sbrs	r10, 4
 6ca:	0f c0       	rjmp	.+30     	; 0x6ea <vfprintf+0x2e8>
 6cc:	fe 01       	movw	r30, r28
 6ce:	e8 0d       	add	r30, r8
 6d0:	f1 1d       	adc	r31, r1
 6d2:	80 81       	ld	r24, Z
 6d4:	80 33       	cpi	r24, 0x30	; 48
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <vfprintf+0x2de>
 6d8:	9a 2d       	mov	r25, r10
 6da:	99 7e       	andi	r25, 0xE9	; 233
 6dc:	a9 2e       	mov	r10, r25
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <vfprintf+0x2f0>
 6e0:	a2 fe       	sbrs	r10, 2
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0x2ee>
 6e4:	b3 94       	inc	r11
 6e6:	b3 94       	inc	r11
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <vfprintf+0x2f0>
 6ea:	8a 2d       	mov	r24, r10
 6ec:	86 78       	andi	r24, 0x86	; 134
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <vfprintf+0x2f0>
 6f0:	b3 94       	inc	r11
 6f2:	a3 fc       	sbrc	r10, 3
 6f4:	10 c0       	rjmp	.+32     	; 0x716 <vfprintf+0x314>
 6f6:	a0 fe       	sbrs	r10, 0
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <vfprintf+0x304>
 6fa:	b2 14       	cp	r11, r2
 6fc:	80 f4       	brcc	.+32     	; 0x71e <vfprintf+0x31c>
 6fe:	28 0c       	add	r2, r8
 700:	92 2c       	mov	r9, r2
 702:	9b 18       	sub	r9, r11
 704:	0d c0       	rjmp	.+26     	; 0x720 <vfprintf+0x31e>
 706:	b2 14       	cp	r11, r2
 708:	58 f4       	brcc	.+22     	; 0x720 <vfprintf+0x31e>
 70a:	b6 01       	movw	r22, r12
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	60 d0       	rcall	.+192    	; 0x7d2 <fputc>
 712:	b3 94       	inc	r11
 714:	f8 cf       	rjmp	.-16     	; 0x706 <vfprintf+0x304>
 716:	b2 14       	cp	r11, r2
 718:	18 f4       	brcc	.+6      	; 0x720 <vfprintf+0x31e>
 71a:	2b 18       	sub	r2, r11
 71c:	02 c0       	rjmp	.+4      	; 0x722 <vfprintf+0x320>
 71e:	98 2c       	mov	r9, r8
 720:	21 2c       	mov	r2, r1
 722:	a4 fe       	sbrs	r10, 4
 724:	0f c0       	rjmp	.+30     	; 0x744 <vfprintf+0x342>
 726:	b6 01       	movw	r22, r12
 728:	80 e3       	ldi	r24, 0x30	; 48
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	52 d0       	rcall	.+164    	; 0x7d2 <fputc>
 72e:	a2 fe       	sbrs	r10, 2
 730:	16 c0       	rjmp	.+44     	; 0x75e <vfprintf+0x35c>
 732:	a1 fc       	sbrc	r10, 1
 734:	03 c0       	rjmp	.+6      	; 0x73c <vfprintf+0x33a>
 736:	88 e7       	ldi	r24, 0x78	; 120
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x33e>
 73c:	88 e5       	ldi	r24, 0x58	; 88
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	b6 01       	movw	r22, r12
 742:	0c c0       	rjmp	.+24     	; 0x75c <vfprintf+0x35a>
 744:	8a 2d       	mov	r24, r10
 746:	86 78       	andi	r24, 0x86	; 134
 748:	51 f0       	breq	.+20     	; 0x75e <vfprintf+0x35c>
 74a:	a1 fe       	sbrs	r10, 1
 74c:	02 c0       	rjmp	.+4      	; 0x752 <vfprintf+0x350>
 74e:	8b e2       	ldi	r24, 0x2B	; 43
 750:	01 c0       	rjmp	.+2      	; 0x754 <vfprintf+0x352>
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	a7 fc       	sbrc	r10, 7
 756:	8d e2       	ldi	r24, 0x2D	; 45
 758:	b6 01       	movw	r22, r12
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	3a d0       	rcall	.+116    	; 0x7d2 <fputc>
 75e:	89 14       	cp	r8, r9
 760:	30 f4       	brcc	.+12     	; 0x76e <vfprintf+0x36c>
 762:	b6 01       	movw	r22, r12
 764:	80 e3       	ldi	r24, 0x30	; 48
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	34 d0       	rcall	.+104    	; 0x7d2 <fputc>
 76a:	9a 94       	dec	r9
 76c:	f8 cf       	rjmp	.-16     	; 0x75e <vfprintf+0x35c>
 76e:	8a 94       	dec	r8
 770:	f3 01       	movw	r30, r6
 772:	e8 0d       	add	r30, r8
 774:	f1 1d       	adc	r31, r1
 776:	80 81       	ld	r24, Z
 778:	b6 01       	movw	r22, r12
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	2a d0       	rcall	.+84     	; 0x7d2 <fputc>
 77e:	81 10       	cpse	r8, r1
 780:	f6 cf       	rjmp	.-20     	; 0x76e <vfprintf+0x36c>
 782:	22 20       	and	r2, r2
 784:	09 f4       	brne	.+2      	; 0x788 <vfprintf+0x386>
 786:	4e ce       	rjmp	.-868    	; 0x424 <vfprintf+0x22>
 788:	b6 01       	movw	r22, r12
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	21 d0       	rcall	.+66     	; 0x7d2 <fputc>
 790:	2a 94       	dec	r2
 792:	f7 cf       	rjmp	.-18     	; 0x782 <vfprintf+0x380>
 794:	f6 01       	movw	r30, r12
 796:	86 81       	ldd	r24, Z+6	; 0x06
 798:	97 81       	ldd	r25, Z+7	; 0x07
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x39e>
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	2b 96       	adiw	r28, 0x0b	; 11
 7a2:	e2 e1       	ldi	r30, 0x12	; 18
 7a4:	cc c0       	rjmp	.+408    	; 0x93e <__epilogue_restores__>

000007a6 <strnlen_P>:
 7a6:	fc 01       	movw	r30, r24
 7a8:	05 90       	lpm	r0, Z+
 7aa:	61 50       	subi	r22, 0x01	; 1
 7ac:	70 40       	sbci	r23, 0x00	; 0
 7ae:	01 10       	cpse	r0, r1
 7b0:	d8 f7       	brcc	.-10     	; 0x7a8 <strnlen_P+0x2>
 7b2:	80 95       	com	r24
 7b4:	90 95       	com	r25
 7b6:	8e 0f       	add	r24, r30
 7b8:	9f 1f       	adc	r25, r31
 7ba:	08 95       	ret

000007bc <strnlen>:
 7bc:	fc 01       	movw	r30, r24
 7be:	61 50       	subi	r22, 0x01	; 1
 7c0:	70 40       	sbci	r23, 0x00	; 0
 7c2:	01 90       	ld	r0, Z+
 7c4:	01 10       	cpse	r0, r1
 7c6:	d8 f7       	brcc	.-10     	; 0x7be <strnlen+0x2>
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	8e 0f       	add	r24, r30
 7ce:	9f 1f       	adc	r25, r31
 7d0:	08 95       	ret

000007d2 <fputc>:
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	fb 01       	movw	r30, r22
 7dc:	23 81       	ldd	r18, Z+3	; 0x03
 7de:	21 fd       	sbrc	r18, 1
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <fputc+0x16>
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	2c c0       	rjmp	.+88     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7e8:	22 ff       	sbrs	r18, 2
 7ea:	16 c0       	rjmp	.+44     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ec:	46 81       	ldd	r20, Z+6	; 0x06
 7ee:	57 81       	ldd	r21, Z+7	; 0x07
 7f0:	24 81       	ldd	r18, Z+4	; 0x04
 7f2:	35 81       	ldd	r19, Z+5	; 0x05
 7f4:	42 17       	cp	r20, r18
 7f6:	53 07       	cpc	r21, r19
 7f8:	44 f4       	brge	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	a0 81       	ld	r26, Z
 7fc:	b1 81       	ldd	r27, Z+1	; 0x01
 7fe:	9d 01       	movw	r18, r26
 800:	2f 5f       	subi	r18, 0xFF	; 255
 802:	3f 4f       	sbci	r19, 0xFF	; 255
 804:	31 83       	std	Z+1, r19	; 0x01
 806:	20 83       	st	Z, r18
 808:	8c 93       	st	X, r24
 80a:	26 81       	ldd	r18, Z+6	; 0x06
 80c:	37 81       	ldd	r19, Z+7	; 0x07
 80e:	2f 5f       	subi	r18, 0xFF	; 255
 810:	3f 4f       	sbci	r19, 0xFF	; 255
 812:	37 83       	std	Z+7, r19	; 0x07
 814:	26 83       	std	Z+6, r18	; 0x06
 816:	14 c0       	rjmp	.+40     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 818:	8b 01       	movw	r16, r22
 81a:	ec 01       	movw	r28, r24
 81c:	fb 01       	movw	r30, r22
 81e:	00 84       	ldd	r0, Z+8	; 0x08
 820:	f1 85       	ldd	r31, Z+9	; 0x09
 822:	e0 2d       	mov	r30, r0
 824:	09 95       	icall
 826:	89 2b       	or	r24, r25
 828:	e1 f6       	brne	.-72     	; 0x7e2 <fputc+0x10>
 82a:	d8 01       	movw	r26, r16
 82c:	16 96       	adiw	r26, 0x06	; 6
 82e:	8d 91       	ld	r24, X+
 830:	9c 91       	ld	r25, X
 832:	17 97       	sbiw	r26, 0x07	; 7
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	17 96       	adiw	r26, 0x07	; 7
 838:	9c 93       	st	X, r25
 83a:	8e 93       	st	-X, r24
 83c:	16 97       	sbiw	r26, 0x06	; 6
 83e:	ce 01       	movw	r24, r28
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	08 95       	ret

0000084a <__ultoa_invert>:
 84a:	fa 01       	movw	r30, r20
 84c:	aa 27       	eor	r26, r26
 84e:	28 30       	cpi	r18, 0x08	; 8
 850:	51 f1       	breq	.+84     	; 0x8a6 <__ultoa_invert+0x5c>
 852:	20 31       	cpi	r18, 0x10	; 16
 854:	81 f1       	breq	.+96     	; 0x8b6 <__ultoa_invert+0x6c>
 856:	e8 94       	clt
 858:	6f 93       	push	r22
 85a:	6e 7f       	andi	r22, 0xFE	; 254
 85c:	6e 5f       	subi	r22, 0xFE	; 254
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	af 4f       	sbci	r26, 0xFF	; 255
 866:	b1 e0       	ldi	r27, 0x01	; 1
 868:	3e d0       	rcall	.+124    	; 0x8e6 <__ultoa_invert+0x9c>
 86a:	b4 e0       	ldi	r27, 0x04	; 4
 86c:	3c d0       	rcall	.+120    	; 0x8e6 <__ultoa_invert+0x9c>
 86e:	67 0f       	add	r22, r23
 870:	78 1f       	adc	r23, r24
 872:	89 1f       	adc	r24, r25
 874:	9a 1f       	adc	r25, r26
 876:	a1 1d       	adc	r26, r1
 878:	68 0f       	add	r22, r24
 87a:	79 1f       	adc	r23, r25
 87c:	8a 1f       	adc	r24, r26
 87e:	91 1d       	adc	r25, r1
 880:	a1 1d       	adc	r26, r1
 882:	6a 0f       	add	r22, r26
 884:	71 1d       	adc	r23, r1
 886:	81 1d       	adc	r24, r1
 888:	91 1d       	adc	r25, r1
 88a:	a1 1d       	adc	r26, r1
 88c:	20 d0       	rcall	.+64     	; 0x8ce <__ultoa_invert+0x84>
 88e:	09 f4       	brne	.+2      	; 0x892 <__ultoa_invert+0x48>
 890:	68 94       	set
 892:	3f 91       	pop	r19
 894:	2a e0       	ldi	r18, 0x0A	; 10
 896:	26 9f       	mul	r18, r22
 898:	11 24       	eor	r1, r1
 89a:	30 19       	sub	r19, r0
 89c:	30 5d       	subi	r19, 0xD0	; 208
 89e:	31 93       	st	Z+, r19
 8a0:	de f6       	brtc	.-74     	; 0x858 <__ultoa_invert+0xe>
 8a2:	cf 01       	movw	r24, r30
 8a4:	08 95       	ret
 8a6:	46 2f       	mov	r20, r22
 8a8:	47 70       	andi	r20, 0x07	; 7
 8aa:	40 5d       	subi	r20, 0xD0	; 208
 8ac:	41 93       	st	Z+, r20
 8ae:	b3 e0       	ldi	r27, 0x03	; 3
 8b0:	0f d0       	rcall	.+30     	; 0x8d0 <__ultoa_invert+0x86>
 8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__ultoa_invert+0x5c>
 8b4:	f6 cf       	rjmp	.-20     	; 0x8a2 <__ultoa_invert+0x58>
 8b6:	46 2f       	mov	r20, r22
 8b8:	4f 70       	andi	r20, 0x0F	; 15
 8ba:	40 5d       	subi	r20, 0xD0	; 208
 8bc:	4a 33       	cpi	r20, 0x3A	; 58
 8be:	18 f0       	brcs	.+6      	; 0x8c6 <__ultoa_invert+0x7c>
 8c0:	49 5d       	subi	r20, 0xD9	; 217
 8c2:	31 fd       	sbrc	r19, 1
 8c4:	40 52       	subi	r20, 0x20	; 32
 8c6:	41 93       	st	Z+, r20
 8c8:	02 d0       	rcall	.+4      	; 0x8ce <__ultoa_invert+0x84>
 8ca:	a9 f7       	brne	.-22     	; 0x8b6 <__ultoa_invert+0x6c>
 8cc:	ea cf       	rjmp	.-44     	; 0x8a2 <__ultoa_invert+0x58>
 8ce:	b4 e0       	ldi	r27, 0x04	; 4
 8d0:	a6 95       	lsr	r26
 8d2:	97 95       	ror	r25
 8d4:	87 95       	ror	r24
 8d6:	77 95       	ror	r23
 8d8:	67 95       	ror	r22
 8da:	ba 95       	dec	r27
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <__ultoa_invert+0x86>
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	61 05       	cpc	r22, r1
 8e2:	71 05       	cpc	r23, r1
 8e4:	08 95       	ret
 8e6:	9b 01       	movw	r18, r22
 8e8:	ac 01       	movw	r20, r24
 8ea:	0a 2e       	mov	r0, r26
 8ec:	06 94       	lsr	r0
 8ee:	57 95       	ror	r21
 8f0:	47 95       	ror	r20
 8f2:	37 95       	ror	r19
 8f4:	27 95       	ror	r18
 8f6:	ba 95       	dec	r27
 8f8:	c9 f7       	brne	.-14     	; 0x8ec <__ultoa_invert+0xa2>
 8fa:	62 0f       	add	r22, r18
 8fc:	73 1f       	adc	r23, r19
 8fe:	84 1f       	adc	r24, r20
 900:	95 1f       	adc	r25, r21
 902:	a0 1d       	adc	r26, r0
 904:	08 95       	ret

00000906 <__prologue_saves__>:
 906:	2f 92       	push	r2
 908:	3f 92       	push	r3
 90a:	4f 92       	push	r4
 90c:	5f 92       	push	r5
 90e:	6f 92       	push	r6
 910:	7f 92       	push	r7
 912:	8f 92       	push	r8
 914:	9f 92       	push	r9
 916:	af 92       	push	r10
 918:	bf 92       	push	r11
 91a:	cf 92       	push	r12
 91c:	df 92       	push	r13
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	ca 1b       	sub	r28, r26
 930:	db 0b       	sbc	r29, r27
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	f8 94       	cli
 936:	de bf       	out	0x3e, r29	; 62
 938:	0f be       	out	0x3f, r0	; 63
 93a:	cd bf       	out	0x3d, r28	; 61
 93c:	09 94       	ijmp

0000093e <__epilogue_restores__>:
 93e:	2a 88       	ldd	r2, Y+18	; 0x12
 940:	39 88       	ldd	r3, Y+17	; 0x11
 942:	48 88       	ldd	r4, Y+16	; 0x10
 944:	5f 84       	ldd	r5, Y+15	; 0x0f
 946:	6e 84       	ldd	r6, Y+14	; 0x0e
 948:	7d 84       	ldd	r7, Y+13	; 0x0d
 94a:	8c 84       	ldd	r8, Y+12	; 0x0c
 94c:	9b 84       	ldd	r9, Y+11	; 0x0b
 94e:	aa 84       	ldd	r10, Y+10	; 0x0a
 950:	b9 84       	ldd	r11, Y+9	; 0x09
 952:	c8 84       	ldd	r12, Y+8	; 0x08
 954:	df 80       	ldd	r13, Y+7	; 0x07
 956:	ee 80       	ldd	r14, Y+6	; 0x06
 958:	fd 80       	ldd	r15, Y+5	; 0x05
 95a:	0c 81       	ldd	r16, Y+4	; 0x04
 95c:	1b 81       	ldd	r17, Y+3	; 0x03
 95e:	aa 81       	ldd	r26, Y+2	; 0x02
 960:	b9 81       	ldd	r27, Y+1	; 0x01
 962:	ce 0f       	add	r28, r30
 964:	d1 1d       	adc	r29, r1
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	ed 01       	movw	r28, r26
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
