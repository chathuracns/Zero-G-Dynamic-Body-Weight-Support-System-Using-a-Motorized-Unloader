
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083a  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000497  00000000  00000000  0000112d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d5a  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00008352  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  0000851a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	21 d0       	rcall	.+66     	; 0xde <main>
  9c:	47 c0       	rjmp	.+142    	; 0x12c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <step>:
}

// Function to generate a pulse with a specified delay
void step(uint16_t delay) {
	// Pulse high
	PORTD |= (1 << PORTD3);
  a0:	5b 9a       	sbi	0x0b, 3	; 11
	for (uint16_t i = 0; i < delay; i++) {
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	d1 f0       	breq	.+52     	; 0xda <step+0x3a>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	45 e0       	ldi	r20, 0x05	; 5
  ac:	4a 95       	dec	r20
  ae:	f1 f7       	brne	.-4      	; 0xac <step+0xc>
  b0:	00 00       	nop
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	82 17       	cp	r24, r18
  b8:	93 07       	cpc	r25, r19
  ba:	b9 f7       	brne	.-18     	; 0xaa <step+0xa>
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <step+0x32>
  be:	45 e0       	ldi	r20, 0x05	; 5
  c0:	4a 95       	dec	r20
  c2:	f1 f7       	brne	.-4      	; 0xc0 <step+0x20>
  c4:	00 00       	nop
		_delay_us(1);  // Delay for 1 microsecond
	}
	// Pulse low
	PORTD &= ~(1 << PORTD3);
	for (uint16_t i = 0; i < delay; i++) {
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	82 17       	cp	r24, r18
  cc:	93 07       	cpc	r25, r19
  ce:	b9 f7       	brne	.-18     	; 0xbe <step+0x1e>
  d0:	08 95       	ret
	PORTD |= (1 << PORTD3);
	for (uint16_t i = 0; i < delay; i++) {
		_delay_us(1);  // Delay for 1 microsecond
	}
	// Pulse low
	PORTD &= ~(1 << PORTD3);
  d2:	5b 98       	cbi	0x0b, 3	; 11
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f2 cf       	rjmp	.-28     	; 0xbe <step+0x1e>
  da:	5b 98       	cbi	0x0b, 3	; 11
  dc:	08 95       	ret

000000de <main>:
int main(void)
{
	uint16_t delay = 1000;  // Initial delay in microseconds

	// Configure pins
	DDRD |= (1 << DDD4);  // Set PD4 as output for Direction
  de:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1 << DDD5);  // Set PD5 as output for Enable
  e0:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << DDD3);  // Set PD3 as output for Pulse
  e2:	53 9a       	sbi	0x0a, 3	; 10

	// Enable the stepper motor
	PORTD |= ~(1 << PORTD5);  // Set PD5 high to enable the stepper motor controller
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8f 6d       	ori	r24, 0xDF	; 223
  e8:	8b b9       	out	0x0b, r24	; 11

	// Set direction
	//PORTD |= (1 << PORTD4);  // Set PD4 high for one direction
	PORTD &= ~(1 << PORTD4);
  ea:	5c 98       	cbi	0x0b, 4	; 11

void step(uint16_t delay);  // Prototype for the step function

int main(void)
{
	uint16_t delay = 1000;  // Initial delay in microseconds
  ec:	08 ee       	ldi	r16, 0xE8	; 232
  ee:	13 e0       	ldi	r17, 0x03	; 3
  f0:	e8 01       	movw	r28, r16
  f2:	04 ef       	ldi	r16, 0xF4	; 244
  f4:	11 e0       	ldi	r17, 0x01	; 1

	// Main loop
	while (1) {
		// Acceleration phase
		for (uint16_t i = 0; i < 500; i++) {
			step(delay);
  f6:	ce 01       	movw	r24, r28
  f8:	d3 df       	rcall	.-90     	; 0xa0 <step>
			if (delay > 100) delay -= 2;  // Decrease delay for acceleration
  fa:	c5 36       	cpi	r28, 0x65	; 101
  fc:	d1 05       	cpc	r29, r1
  fe:	08 f0       	brcs	.+2      	; 0x102 <main+0x24>
 100:	22 97       	sbiw	r28, 0x02	; 2
 102:	01 50       	subi	r16, 0x01	; 1
 104:	11 09       	sbc	r17, r1
	PORTD &= ~(1 << PORTD4);

	// Main loop
	while (1) {
		// Acceleration phase
		for (uint16_t i = 0; i < 500; i++) {
 106:	b9 f7       	brne	.-18     	; 0xf6 <main+0x18>
 108:	08 ee       	ldi	r16, 0xE8	; 232
 10a:	13 e0       	ldi	r17, 0x03	; 3
			if (delay > 100) delay -= 2;  // Decrease delay for acceleration
		}

		// Constant speed phase
		for (uint16_t i = 0; i < 1000; i++) {
			step(100);  // Run at higher speed
 10c:	84 e6       	ldi	r24, 0x64	; 100
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	c7 df       	rcall	.-114    	; 0xa0 <step>
 112:	01 50       	subi	r16, 0x01	; 1
 114:	11 09       	sbc	r17, r1
			step(delay);
			if (delay > 100) delay -= 2;  // Decrease delay for acceleration
		}

		// Constant speed phase
		for (uint16_t i = 0; i < 1000; i++) {
 116:	d1 f7       	brne	.-12     	; 0x10c <main+0x2e>
 118:	8e 01       	movw	r16, r28
 11a:	08 51       	subi	r16, 0x18	; 24
			step(100);  // Run at higher speed
		}

		// Deceleration phase
		for (uint16_t i = 0; i < 500; i++) {
			step(delay);
 11c:	1c 4f       	sbci	r17, 0xFC	; 252
 11e:	ce 01       	movw	r24, r28
 120:	bf df       	rcall	.-130    	; 0xa0 <step>
			delay += 2;  // Increase delay for deceleration
 122:	22 96       	adiw	r28, 0x02	; 2
		for (uint16_t i = 0; i < 1000; i++) {
			step(100);  // Run at higher speed
		}

		// Deceleration phase
		for (uint16_t i = 0; i < 500; i++) {
 124:	0c 17       	cp	r16, r28
 126:	1d 07       	cpc	r17, r29
 128:	d1 f7       	brne	.-12     	; 0x11e <main+0x40>
 12a:	e2 cf       	rjmp	.-60     	; 0xf0 <main+0x12>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
